datos<- matrix(data=c(0, 0, 30, 0.1, 60, 0.4, 100, 1.2, 150, 3.0, 200, 6.5), nrow=6, ncol = 2,byrow = TRUE)
X<- matrix(data = c(1, 0 ,1,30,1,60,1,100,1,150,1,200 ), nrow=6, ncol=2,byrow=TRUE)
Y<- matrix(data = c(0,0.1,0.4,1.2,3.0,6.5 ), nrow=6, ncol=1,byrow=TRUE)
Inc<- matrix(data = c(0.14,0.17,0.17,0.17,0.22,0.23 ), nrow=6, ncol=1,byrow=TRUE)
X_transpuesta<- t(X)
XtranspuestaX <- X_transpuesta %*% X
XtranspuestaXInversa <- solve(XtranspuestaX)
XtranspuestaXInversa_Xtrans<- XtranspuestaXInversa %*% X_transpuesta
XtranspuestaXInversa_Xtrans_Y<-XtranspuestaXInversa_Xtrans %*% Y
b_inicial= XtranspuestaXInversa_Xtrans_Y[1,1]
m_inicial=XtranspuestaXInversa_Xtrans_Y[2,1]
numeroIteraciones=10
for (t in 1:numeroIteraciones){
y_calc <- matrix(nrow = 6, ncol = 1)
for (i in 1:6) {
{
y_calc[i,1] <- X[i,2] * XtranspuestaXInversa_Xtrans_Y[2,1] +XtranspuestaXInversa_Xtrans_Y[1,1]
}
}
residuos<-matrix(nrow = 6, ncol = 1)
for (i in 1:6) {
{
residuos[i,1] <- Y[i,1]-y_calc[i,1]
}
}
P<- matrix(0,nrow = 6, ncol = 6)
for (i in 1:6) {
{
P[i,i] <- rnorm(1,mean=0,sd=1)
}
}
X_transpuestaP<- X_transpuesta %*% P
X_transpuestaPX<-X_transpuestaP %*% X
X_transpuestaPXInv<-solve(X_transpuestaPX)
X_transpuestaPXInvXtrans<- X_transpuestaPXInv %*% X_transpuesta
X_transpuestaPXInvXtransP<- X_transpuestaPXInvXtrans %*% P
X_transpuestaPXInvXtransPY<- X_transpuestaPXInvXtransP %*% Y}
b= X_transpuestaPXInvXtransPY[1,1]
m= X_transpuestaPXInvXtransPY[2,1]
b
b_inicial
datos<- matrix(data=c(0, 0, 30, 0.1, 60, 0.4, 100, 1.2, 150, 3.0, 200, 6.5), nrow=6, ncol = 2,byrow = TRUE)
X<- matrix(data = c(1, 0 ,1,30,1,60,1,100,1,150,1,200 ), nrow=6, ncol=2,byrow=TRUE)
Y<- matrix(data = c(0,0.1,0.4,1.2,3.0,6.5 ), nrow=6, ncol=1,byrow=TRUE)
Inc<- matrix(data = c(0.14,0.17,0.17,0.17,0.22,0.23 ), nrow=6, ncol=1,byrow=TRUE)
X_transpuesta<- t(X)
XtranspuestaX <- X_transpuesta %*% X
XtranspuestaXInversa <- solve(XtranspuestaX)
XtranspuestaXInversa_Xtrans<- XtranspuestaXInversa %*% X_transpuesta
XtranspuestaXInversa_Xtrans_Y<-XtranspuestaXInversa_Xtrans %*% Y
b_inicial= XtranspuestaXInversa_Xtrans_Y[1,1]
m_inicial=XtranspuestaXInversa_Xtrans_Y[2,1]
numeroIteraciones=1000
for (t in 1:numeroIteraciones){
y_calc <- matrix(nrow = 6, ncol = 1)
for (i in 1:6) {
{
y_calc[i,1] <- X[i,2] * XtranspuestaXInversa_Xtrans_Y[2,1] +XtranspuestaXInversa_Xtrans_Y[1,1]
}
}
residuos<-matrix(nrow = 6, ncol = 1)
for (i in 1:6) {
{
residuos[i,1] <- Y[i,1]-y_calc[i,1]
}
}
P<- matrix(0,nrow = 6, ncol = 6)
for (i in 1:6) {
{
P[i,i] <- rnorm(1,mean=0,sd=1)
}
}
X_transpuestaP<- X_transpuesta %*% P
X_transpuestaPX<-X_transpuestaP %*% X
X_transpuestaPXInv<-solve(X_transpuestaPX)
X_transpuestaPXInvXtrans<- X_transpuestaPXInv %*% X_transpuesta
X_transpuestaPXInvXtransP<- X_transpuestaPXInvXtrans %*% P
X_transpuestaPXInvXtransPY<- X_transpuestaPXInvXtransP %*% Y}
b= X_transpuestaPXInvXtransPY[1,1]
m= X_transpuestaPXInvXtransPY[2,1]
b
b_inicial
m
m_inicial
# Definir una matriz llamada 'datos' que contiene los valores de x y y para un modelo de regresión lineal simple.
# La matriz tiene 6 filas y 2 columnas, donde la primera columna contiene los valores de x y la segunda columna los valores de y.
datos<- matrix(data=c(0, 0, 30, 0.1, 60, 0.4, 100, 1.2, 150, 3.0, 200, 6.5), nrow=6, ncol = 2,byrow = TRUE)
# Definir una matriz 'X' que contiene los valores de x y una columna de 1s para el término constante.
# La matriz tiene 6 filas y 2 columnas.
X<- matrix(data = c(1, 0 ,1,30,1,60,1,100,1,150,1,200 ), nrow=6, ncol=2,byrow=TRUE)
# Definir una matriz 'Y' que contiene los valores de y.
# La matriz tiene 6 filas y 1 columna.
Y<- matrix(data = c(0,0.1,0.4,1.2,3.0,6.5 ), nrow=6, ncol=1,byrow=TRUE)
# Definir una matriz 'Inc' que contiene los valores de incertidumbre de los valores de y.
# La matriz tiene 6 filas y 1 columna.
Inc<- matrix(data = c(0.14,0.17,0.17,0.17,0.22,0.23 ), nrow=6, ncol=1,byrow=TRUE)
# Calcular la transpuesta de la matriz 'X'.
X_transpuesta<- t(X)
# Calcular el producto punto de la transpuesta de la matriz 'X' y 'X'.
XtranspuestaX <- X_transpuesta %*% X
# Calcular la inversa de la matriz producto punto de la transpuesta de la matriz 'X' y 'X'.
XtranspuestaXInversa <- solve(XtranspuestaX)
# Calcular el producto punto de la inversa de la matriz producto punto de la transpuesta de la matriz 'X' y 'X' y la transpuesta de la matriz 'X'.
XtranspuestaXInversa_Xtrans<- XtranspuestaXInversa %*% X_transpuesta
# Calcular el producto punto de la matriz resultado anterior y la matriz 'Y'.
XtranspuestaXInversa_Xtrans_Y<-XtranspuestaXInversa_Xtrans %*% Y
# Definir las variables 'b_inicial' y 'm_inicial' como el primer y segundo elemento de la matriz resultado anterior, respectivamente.
b_inicial= XtranspuestaXInversa_Xtrans_Y[1,1]
m_inicial=XtranspuestaXInversa_Xtrans_Y[2,1]
# Definir el número de iteraciones del bucle 'for'.
numeroIteraciones=1000
#El ciclo for itera el proceso según la cantidad determinada
for (t in 1:numeroIteraciones){
#Se calculan los Y con el ajuste inicial
y_calc <- matrix(nrow = 6, ncol = 1)
for (i in 1:6) {
{
y_calc[i,1] <- X[i,2] * XtranspuestaXInversa_Xtrans_Y[2,1] +XtranspuestaXInversa_Xtrans_Y[1,1]
}
}
residuos<-matrix(nrow = 6, ncol = 1)
for (i in 1:6) {
{
residuos[i,1] <- Y[i,1]-y_calc[i,1]
}
}
#La matriz P que realiza el ajuste obtiene acá valores aleatorios según una distribución normal
P<- matrix(0,nrow = 6, ncol = 6)
for (i in 1:6) {
{
P[i,i] <- rnorm(1,mean=0,sd=1)
}
}
#Se realizan los cálculos de las matrices nuevamente, pero con el ajuste que brinda P
X_transpuestaP<- X_transpuesta %*% P
X_transpuestaPX<-X_transpuestaP %*% X
X_transpuestaPXInv<-solve(X_transpuestaPX)
X_transpuestaPXInvXtrans<- X_transpuestaPXInv %*% X_transpuesta
X_transpuestaPXInvXtransP<- X_transpuestaPXInvXtrans %*% P
X_transpuestaPXInvXtransPY<- X_transpuestaPXInvXtransP %*% Y}
b= X_transpuestaPXInvXtransPY[1,1]
m= X_transpuestaPXInvXtransPY[2,1]
#Se muestran los valores obtenidos
b
b_inicial
m
m_inicial
